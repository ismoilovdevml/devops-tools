stages:
  - build_and_push
  - deploy

variables:
  DOCKER_BUILDKIT: 1
  IMAGE_NAME: devops-journey
  CONTAINER_NAME: devops-journey
  PORT: "3000:3000"
  REPO_NAME: $CI_PROJECT_PATH
  REGISTRY: "registry.gitlab.com"

build_and_push:
  stage: build_and_push
  image: docker:stable

  services:
    - docker:dind

  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

  script:
    - docker build -t $REGISTRY/$REPO_NAME/$IMAGE_NAME:$CI_COMMIT_SHA .
    - docker push $REGISTRY/$REPO_NAME/$IMAGE_NAME:$CI_COMMIT_SHA
    
deploy-dev:
  stage: deploy
  image: alpine:latest
  environment:
    name: dev

  before_script:
    - apk add --update --no-cache openssh-client

  script:
    - mkdir -p ~/.ssh
    - echo "$DEV_SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan -H $DEV_SERVER_IP >> ~/.ssh/known_hosts
    - ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no $DEV_SERVER_USERNAME@$DEV_SERVER_IP "echo "$CI_JOB_TOKEN" | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY"
    - ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no $DEV_SERVER_USERNAME@$DEV_SERVER_IP "docker pull $REGISTRY/$REPO_NAME/$IMAGE_NAME:$CI_COMMIT_SHA"
    - ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no $DEV_SERVER_USERNAME@$DEV_SERVER_IP "docker stop $CONTAINER_NAME || true"
    - ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no $DEV_SERVER_USERNAME@$DEV_SERVER_IP "docker rm $CONTAINER_NAME || true"
    - ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no $DEV_SERVER_USERNAME@$DEV_SERVER_IP "docker run -d --name $CONTAINER_NAME -p $PORT $REGISTRY/$REPO_NAME/$IMAGE_NAME:$CI_COMMIT_SHA"
  only:
    - dev


deploy-stage:
  stage: deploy
  image: alpine:latest
  environment:
    name: stage

  before_script:
    - apk add --update --no-cache openssh-client

  script:
    - mkdir -p ~/.ssh
    - echo "$STAGE_SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan -H $STAGE_SERVER_IP >> ~/.ssh/known_hosts
    - ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no $STAGE_SERVER_USERNAME@$STAGE_SERVER_IP "echo "$CI_JOB_TOKEN" | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY"
    - ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no $STAGE_SERVER_USERNAME@$STAGE_SERVER_IP "docker pull $REGISTRY/$REPO_NAME/$IMAGE_NAME:$CI_COMMIT_SHA"
    - ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no $STAGE_SERVER_USERNAME@$STAGE_SERVER_IP "docker stop $CONTAINER_NAME || true"
    - ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no $STAGE_SERVER_USERNAME@$STAGE_SERVER_IP "docker rm $CONTAINER_NAME || true"
    - ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no $STAGE_SERVER_USERNAME@$STAGE_SERVER_IP "docker run -d --name $CONTAINER_NAME -p $PORT $REGISTRY/$REPO_NAME/$IMAGE_NAME:$CI_COMMIT_SHA"
  only:
    - stage

deploy-prod:
  stage: deploy
  image: alpine:latest
  environment:
    name: prod

  before_script:
    - apk add --update --no-cache openssh-client

  script:
    - mkdir -p ~/.ssh
    - echo "$PROD_SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan -H $PROD_SERVER_IP >> ~/.ssh/known_hosts
    - ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no $PROD_SERVER_USERNAME@$PROD_SERVER_IP "echo "$CI_JOB_TOKEN" | docker login -u gitlab-ci-token --password-stdin $CI_REGISTRY"
    - ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no $PROD_SERVER_USERNAME@$PROD_SERVER_IP "docker pull $REGISTRY/$REPO_NAME/$IMAGE_NAME:$CI_COMMIT_SHA"
    - ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no $PROD_SERVER_USERNAME@$PROD_SERVER_IP "docker stop $CONTAINER_NAME || true"
    - ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no $PROD_SERVER_USERNAME@$PROD_SERVER_IP "docker rm $CONTAINER_NAME || true"
    - ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no $PROD_SERVER_USERNAME@$PROD_SERVER_IP "docker run -d --name $CONTAINER_NAME -p $PORT $REGISTRY/$REPO_NAME/$IMAGE_NAME:$CI_COMMIT_SHA"
  only:
    - prod